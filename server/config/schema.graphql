scalar Date

interface Node {
  id: ID
}

type Query {
  buildNumber: String

  user(id: ID!): User
  users: [User!]!

  plant(id: ID!): Plant
  plants: [Plant!]!

  nook(id: ID!): Nook
  nooks: [Nook!]!

  genus(id: ID!): Genus
  genera: [Genus!]!
}

type User implements Node {
  id: ID!
  nickname: String!
  firstName: String!
  lastName: String 
  email: String
  photo: String
  city: String! 
  nooks: [Nook!]!
  createdAt: Date!
  updatedAt: Date
}

type Plant implements Node {
  id: ID!
  name: String!
  genus: Genus!
  photo: String
  nook: Nook!
  health: Health!
  waterings: [Watering!]!
  createdAt: Date!
  updatedAt: Date
}

type Nook implements Node {
  id: ID!
  name: String!
  location: String!
  photo: String
  user: User!
  luxLevel: Level!
  plants: [Plant!]!
  createdAt: Date!
  updatedAt: Date
}

type Genus implements Node { 
  id: ID! 
  nickname: String!
  nomenclature: String! 
  description: String! 
  instructions: String! 
  photo: String!
  colors: String!
  luxLevel: Level! 
  waterLevel: Level!
  wateringCycle: Frequency!
}

type Watering {
  id: ID! 
  plant: Plant!
  priority: Level!
  expectedAt: Date!
  executedAt: Date
}

type Mutation {
  createUser(input: CreateUserInput): UserPayload
  createPlant(input: CreatePlantInput): PlantPayload
  createNook(input: CreateNookInput): NookPayload
  createWatering(input: CreateWateringInput): WateringPayload
}

type Subscription {
  userCreated: User
  plantCreated: Plant
  nookCreated: Nook
  wateringCreated: Watering
}

input CreateUserInput {
  firstName: String!
  lastName: String
  email: String
}

input CreatePlantInput {
  name: String!
  genusId: ID!
  nookId: ID!
  userId: ID!
}

input CreateNookInput {
  name: String!
  location: String!
  userId: ID!
}

input CreateWateringInput {
  priority: Level!
  expectedAt: Date!
  plantId: ID!
}

type UserPayload {
  user: User
}

type PlantPayload {
  plant: Plant
}

type NookPayload {
  nook: Nook
}

type WateringPayload {
  watering: Watering
}

enum Level { 
  HIGH 
  MEDIUM 
  LOW
}

enum Health { 
  THRIVING 
  HEALTHY 
  SICK 
  DYING 
  DEAD
}

enum Frequency { 
  DAILY 
  BIWEEKLY 
  WEEKLY 
  MONTHLY 
  QUARTERLY 
  YEARLY
} 