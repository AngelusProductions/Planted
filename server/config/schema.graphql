scalar Date

interface Node {
  id: ID!
}

type Query {
  buildNumber: String
  user(id: ID!): User
  users: [User!]!
  plants: [Plant!]!
}

type User implements Node {
  id: ID!
  nickname: String!
  firstName: String!
  lastName: String!
  photo: String
  email: String!
  city: String
  nooks: [Nook!]!
  plants: [Plant!]!
}

type Nook implements Node {
  id: ID!
  name: String!
  location: String
  photo: String
  luxLevel: Level!
  plants: [Plant!]!
}

type Plant implements Node {
  id: ID!
  name: String!
  photo: String
  health: Health!
}

type Mutation {
  createUser(input: CreateUserInput): UserPayload
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  nickname: String!
}

type UserPayload {
  user: User
}

type Subscription {
  userCreated: User
}

enum Level {
  HIGH
  MEDIUM
  LOW
}

enum Health {
  THRIVING
  HEALTHY
  SICK
  DYING
  DEAD
}