scalar Date

interface Node {
	id: ID
}

type Query {
  user(id: ID!): User
  users: [User!]
  plant(id: ID!): Plant
  plants: [Plant!]
  nook(id: ID!): Nook
  nooks: [Nook!]
  plantType(id: ID!): PlantType
  plantTypes: [PlantType!]
  watering(id: ID!): Watering
  waterings: [Watering!]
  wish(id: ID!): Wish
  wishes: [Wish!]
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String 
  email: String
  photoUrl: String
  nooks: [Nook!]
  createdAt: Date!
  updatedAt: Date
}

type Plant implements Node {
	id: ID!
	photoUrl: String
	nook: Nook!
	plantType: PlantType!
	waterings: [Watering!]
	createdAt: Date!
	updatedAt: Date
}

type Nook implements Node {
  id: ID!
  name: String!
  photoUrl: String
  luxLevel: LuxLevel!
  user: User!
  plants: [Plant!]
  createdAt: Date!
  updatedAt: Date
}

type PlantType implements Node { 
  id: ID! 
  name: String!
  description: String! 
  instructions: String! 
  photoUrl: String!
  luxLevel: LuxLevel! 
  waterLevel: WaterLevel!
  waterCycle: WaterCycle!
  plants: [Plant!]
}

type Watering implements Node {
  id: ID! 
  plant: Plant!
  expectedAt: Date!
  executedAt: Date
  createdAt: Date!
  updatedAt: Date
}

type Wish implements Node {
  id: ID! 
  user: User!
  plantType: PlantType!
  nook: Nook
  createdAt: Date!
  updatedAt: Date
}

type Mutation {
  createUser(input: CreateUserInput): UserPayload
  createPlant(input: CreatePlantInput): PlantPayload
  createNook(input: CreateNookInput): NookPayload
  createWatering(input: CreateWateringInput): WateringPayload
  createWish(input: CreateWishInput): WishPayload
}

input CreateUserInput {
	firstName: String!
	lastName: String
  photoUrl: String
	email: String
}

input CreatePlantInput {
  photoUrl: String
	nookId: ID!
	plantTypeId: ID!
}

input CreateNookInput {
	name: String!
  photoUrl: String
  luxLevel: LuxLevel
	userId: ID!
}

input CreateWateringInput {
	expectedAt: Date!
  executedAt: Date
	plantId: ID!
}

input CreateWishInput {
	userId: ID!
  plantTypeId: ID!
	nookId: ID
}

type UserPayload {
  user: User
}
type PlantPayload {
  plant: Plant
}
type NookPayload {
  nook: Nook
}
type WateringPayload {
  watering: Watering
}
type WishPayload {
  wish: Wish
}

enum LuxLevel { 
  HIGH 
  MEDIUM 
  LOW
}

enum WaterLevel {
	HIGH
	MEDIUM
	LOW
}

enum WaterCycle {
	WEEKLY
	BIWEEKLY
	MONTHLY
}
