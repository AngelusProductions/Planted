scalar Date

interface Node {
  id: ID!
}

type Query {
  buildNumber: String
  user(id: ID!): User
  users: [User!]!
  plants: [Plant!]!
}

type User implements Node {
  id: ID!
  nickname: String!
  firstName: String!
  lastName: String!
  email: String!
  photo: String
  city: String
  nooks: [Nook!]!
  plants: [Plant!]!
}

type Nook implements Node {
  id: ID!
  name: String!
  luxLevel: Level!
  location: String
  photo: String
  plants: [Plant!]!
}

type Plant implements Node {
  id: ID!
  name: String!
  health: Health!
  photo: String
  waterings: [Watering!]!
}

type Genus implements Node { 
  id: ID! 
  nickname: String!
  nomenclature: String! 
  description: String! 
  instructions: String! 
  photo: String!
  luxPreferred: Level! 
  wateringCycle: Frequency!
}

type Watering {
  id: ID! 
  priority: Level!
  expectedAt: Date!
  executedAt: Date
}

type Mutation {
  createUser(input: CreateUserInput): UserPayload
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  nickname: String!
}

type UserPayload {
  user: User
}

type Subscription {
  userCreated: User
}

enum Level {
  HIGH
  MEDIUM
  LOW
}

enum Health {
  THRIVING
  HEALTHY
  SICK
  DYING
  DEAD
}

enum Frequency {
    DAILY
    BIWEEKLY
    WEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}
