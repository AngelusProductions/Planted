scalar Date

interface Node {
  id: ID
}

type Query {
  buildNumber: String

  user(id: ID!): User
  users: [User!]!

  plant(id: ID!): Plant
  plants: [Plant!]!

  nook(id: ID!): Nook
  nooks: [Nook!]!

  plantType(id: ID!): PlantType
  plantTypes: [PlantType!]!

  watering(id: ID!): Watering
  waterings: [Watering!]!
}

type User implements Node {
  id: ID!
  nickname: String!
  firstName: String!
  lastName: String 
  email: String
  photoUrl: String
  nooks: [Nook!]!
  createdAt: Date!
  updatedAt: Date
}

type Plant implements Node {
  id: ID!
  name: String!
  plantType: PlantType!
  photoUrl: String
  nook: Nook
  health: PlantHealth!
  watering: Watering!
  createdAt: Date!
  updatedAt: Date
}

type Nook implements Node {
  id: ID!
  name: String!
  photoUrl: String
  user: User!
  luxLevel: LuxLevel!
  plants: [Plant!]!
  createdAt: Date!
  updatedAt: Date
}

type PlantType implements Node { 
  id: ID! 
  name: String!
  description: String! 
  instructions: String! 
  features: String!
  photoUrl: String!
  colors: String!
  luxLevel: LuxLevel! 
  waterLevel: WaterLevel!
  wateringCycle: WateringFrequency!
}

type Watering {
  id: ID! 
  plant: Plant!
  expectedAt: Date!
  executedAt: Date
  createdAt: Date!
  updatedAt: Date
}

type Mutation {
  createUser(input: CreateUserInput): UserPayload
  createPlant(input: CreatePlantInput): PlantPayload
  createNook(input: CreateNookInput): NookPayload
  createWatering(input: CreateWateringInput): WateringPayload
}

type Subscription {
  userCreated: User
  plantCreated: Plant
  nookCreated: Nook
  wateringCreated: Watering
}

input CreateUserInput {
  firstName: String!
  lastName: String
  email: String
}

input CreatePlantInput {
  name: String!
  plantTypeId: ID!
  nookId: ID!
}

input CreateNookInput {
  name: String!
  userId: ID!
}

input CreateWateringInput {
  expectedAt: Date!
  plantId: ID!
}

type UserPayload {
  user: User
}

type PlantPayload {
  plant: Plant
}

type NookPayload {
  nook: Nook
}

type WateringPayload {
  watering: Watering
}

enum LuxLevel { 
  HIGH 
  MEDIUM 
  LOW
}

enum WaterLevel { 
  HIGH 
  MEDIUM 
  LOW
}

enum PlantHealth { 
  THRIVING 
  HEALTHY 
  SICK 
  DYING 
  DEAD
}

enum WateringFrequency { 
  DAILY 
  BIWEEKLY 
  WEEKLY 
  MONTHLY 
  QUARTERLY 
  YEARLY
} 